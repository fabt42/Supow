# Trigger
# Trigger
# Trigger
# Trigger
# Trigger
# Trigger
# Trigger
# Trigger
# Trigger 
version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}
      - run: echo ${CIRCLE_WORKFLOW_ID:0:7}
#commands:
  #destroy-environment:
    #description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    #steps:
      #- run:
          #name: Destroy environments
          #when: on_fail
          #command: |
            # Your code here
            #exit 1

  #revert-migrations:
    #description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    #steps:
      #- run:
          #name: Revert migrations
          # Add when this will run
          #command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS = 1
            #if(( $SUCCESS==1 )); 
            #then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              #exit 1
            #fi
            
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - print_pipeline_id
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "***This is a text notification that the **notify**-job was triggered. This notification should be visible in Slack as workflow ${CIRCLE_WORKFLOW_ID} ${CIRCLE_WORKFLOW_ID:0:7} started***",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
          # keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
          # keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
             # exit 1 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
      #    keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end test
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
      #     keys: [backend-build]
      # Your job code here
      - run:
          name: back-end test
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
      #     keys: [frontend-build]
      # Your job code here
      - run:
          name: Install Deps
          command: |
             # Your code here
             cd frontend
             npm install
      - run:
          name: Frontend Scan
          command:  |
            cd frontend
            npm install --include=peer
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=none --force
            #npm audit --dry-run
            #npm-audit --audit-level=none
            #npm install --include=peer
            #npm install node-fetch --save-dev
            #npm install minimatch --save-dev
            #npm install json5 --save-dev
            #npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            #npm audit --audit-level=critical
            # No other fix at the moment
            #npm update minimist --depth 4
            #npm update js-yaml --depth 4
            #npm update loader-utils --depth 2
            #npm update json5 --depth 3
            #npm audit --audit-level=null
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Backend Scan
          command:  |
            cd backend
            npm install --include=peer
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=none --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
            # Do it again
            # npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
            # No other fix at the moment
            # npm audit --audit-level=null
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            

  deploy-infrastructure:
    docker:
      - image: circleci/node:13.8.0
      # - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # Let's install some dependecies first
      #       yum -y install tar gzip
      - run:
          name: Install Dependencies
          command: |
            apk add --update ansible
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople --disable-rollback
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople --disable-rollback
      - run:
          name: Add back-end IP to ansible inventory
          command: |
            # Your code here
            IPS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text) 
            echo "$IPS" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      #Fingerprints
      - add_ssh_keys:
            fingerprints: ["b0:dc:47:24:b2:13:0d:85:32:1f:f6:48:70:89:8c:60"]
      - run:
          name: Install dependencies with APK
          command: |
            apk update && \
            apk add --update ansible \
            && apk add gzip tar
      - run:
          name: Install dependencies with Yum
          command: |
            # Let's install some dependecies first
            yum -y install tar gzip
      - run:
          name: Install dependencies with Yum
          command: |             
            yum update -y
            yum install tar -y
            yum install gzip -y
            yum install curl -y
            yum install awscli -y
            yum install python ansible -y
            # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            # . ~/.nvm/nvm.sh
            # nvm install node
            # nvm install npm
            cd ..
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      #Attach workspace
      - attach_workspace:
            at: /root/project/
      #Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              #curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'Thi$i$@keyV@luewhichsh0ldntb3h3r3'
              #For development only
              curl --insecure https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
      # - image: amazon/aws-cli
    steps:
        - checkout 
        - run:
            name: Install dependencies
            command: |             
              yum update -y
              yum install tar -y
              yum install gzip -y
              yum install curl -y
              yum install awscli -y
              yum install python ansible -y
              #curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
              # . ~/.nvm/nvm.sh
              # nvm install node
              # nvm install npm
              cd ..
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        #- destroy_environment
        #- revert-migrations      
                    
  #deploy-backend:
    #docker:
      # Docker image here that supports Ansible
    #steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Deploy backend
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  #smoke-test:
    #docker:
      # Lightweight Docker image 
    #steps:
      # Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Get backend url
          #command: |
            # your code here
      #- run:
          #name: Backend smoke test.
          #command: |
            # your code here
      #- run:
          #name: Frontend smoke test.
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  #cloudfront-update:
    #docker:
      # Docker image here that supports AWS CLI
    #steps:
      # Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Update cloudfront distribution
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

#cleanup:
    #docker:
      # Docker image here
    #steps:
      # Checkout code from git
      #- run:
          #name: Get old stack workflow id
          #command: |
            # your code here
            #export OldWorkflowID="the id here"
            #export STACKS=[] #put the list of stacks here
      #- run:
          #name: Remove old stacks and files
          #command: |
            #if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            #then
              # your code here
            #fi
            

workflows:
  default:
    jobs:
      - notify
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #  branches:
          #     only: [test-feature-branch]
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      #- run-migrations:
          #requires: [configure-infrastructure]
      #- deploy-frontend:
          #requires: [run-migrations]
      #- deploy-backend:
          #requires: [run-migrations]
      #- smoke-test:
          #requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
          #requires: [smoke-test]
      #- cleanup:
          #requires: [cloudfront-update]

# VS Code Extension Version: 1.5.1
#Closing Comment